/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var gramatica = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,12],$V1=[1,21],$V2=[1,22],$V3=[1,23],$V4=[1,24],$V5=[1,25],$V6=[1,14],$V7=[1,15],$V8=[1,18],$V9=[1,17],$Va=[1,16],$Vb=[1,19],$Vc=[5,16,21,22,23,24,25,26,36,41,42,43,46,49],$Vd=[1,33],$Ve=[1,43],$Vf=[1,42],$Vg=[1,32],$Vh=[1,36],$Vi=[1,37],$Vj=[1,38],$Vk=[1,39],$Vl=[1,40],$Vm=[1,41],$Vn=[1,48],$Vo=[1,52],$Vp=[26,31],$Vq=[1,59],$Vr=[1,58],$Vs=[1,60],$Vt=[1,61],$Vu=[1,62],$Vv=[1,63],$Vw=[1,64],$Vx=[1,65],$Vy=[1,66],$Vz=[1,67],$VA=[11,29,32,38,50,51,52,53,54,55,56,57,58,59],$VB=[28,29],$VC=[2,24],$VD=[29,38],$VE=[5,16,21,22,23,24,25,26,36,40,41,42,43,46,49],$VF=[11,29,32,38,50,51,54,55,56,57,58,59],$VG=[11,29,32,38,54,55,56,57,58,59],$VH=[11,29,32,38,58,59],$VI=[1,122],$VJ=[11,29,31,32,38,50,51,52,53,54,55,56,57,58,59];
var parser = {trace: function trace () { },
yy: {},
symbols_: {"error":2,"INICIO":3,"INSTRUCCIONES":4,"EOF":5,"INSTRUCCION":6,"DECLARACION":7,"ASIGNACION":8,"IF":9,"PRINT":10,"pcoma":11,"DOWHILE":12,"WHILE":13,"FUNCION":14,"LLAMADA":15,"return":16,"EXPRESION":17,"TIPO":18,"TIPO_PRIMITIVO":19,"DIM":20,"integer":21,"double":22,"string":23,"char":24,"boolean":25,"identificador":26,"IDENTIFICADOR_LISTA":27,"=":28,",":29,"PARAMETRO_LISTA":30,"[":31,"]":32,"ARREGLO":33,"nuevo":34,"DIMENSIONES":35,"si":36,"(":37,")":38,"BLOQUE_INSTRUCCIONES":39,"sino":40,"mientras":41,"hacer":42,"print":43,"LISTA_EXPRESION":44,"LISTA_PARAMETROS":45,"vacio":46,"PARAMETRO":47,"llaveI":48,"llaveD":49,"-":50,"+":51,"*":52,"/":53,"<":54,">":55,"<=":56,">=":57,"==":58,"!=":59,"ENTERO":60,"DECIMAL":61,"verdadero":62,"falso":63,"STRING_LITERAL":64,"CHAR_LITERAL":65,"$accept":0,"$end":1},
terminals_: {2:"error",5:"EOF",11:"pcoma",16:"return",21:"integer",22:"double",23:"string",24:"char",25:"boolean",26:"identificador",28:"=",29:",",31:"[",32:"]",34:"nuevo",36:"si",37:"(",38:")",40:"sino",41:"mientras",42:"hacer",43:"print",46:"vacio",48:"llaveI",49:"llaveD",50:"-",51:"+",52:"*",53:"/",54:"<",55:">",56:"<=",57:">=",58:"==",59:"!=",60:"ENTERO",61:"DECIMAL",62:"verdadero",63:"falso",64:"STRING_LITERAL",65:"CHAR_LITERAL"},
productions_: [0,[3,2],[4,2],[4,1],[6,1],[6,1],[6,1],[6,2],[6,2],[6,1],[6,1],[6,2],[6,3],[18,2],[18,1],[19,1],[19,1],[19,1],[19,1],[19,1],[7,3],[7,5],[27,3],[27,1],[30,1],[8,4],[20,3],[20,2],[33,3],[35,4],[35,3],[9,5],[9,7],[9,7],[13,5],[12,6],[10,4],[15,4],[15,3],[14,6],[14,6],[14,5],[14,5],[45,3],[45,1],[44,3],[44,1],[47,2],[39,3],[39,2],[17,2],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,3],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,1],[17,3]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
return new Arbol(this.$);
break;
case 2:
this.$ = $$[$0-1]; this.$.push($$[$0]);
break;
case 3:
 this.$ = [$$[$0]]; 
break;
case 4: case 5: case 6: case 9: case 10: case 14:
this.$ = $$[$0];
break;
case 7: case 8: case 11: case 48:
this.$ = $$[$0-1];
break;
case 12:
this.$ = new Return($$[$0-1]);
break;
case 13:
this.$ = new Tipo($$[$0-1].tipo, $$[$0]);
break;
case 15: case 16:
this.$ = new Tipo(Types.NUMERIC);
break;
case 17: case 18:
this.$ = new Tipo(Types.STRING);
break;
case 19:
this.$ = new Tipo(Types.BOOLEAN);
break;
case 20:
 this.$ = new Declaracion($$[$0-2], $$[$0-1], null, this._$.first_line, this._$.first_column);
break;
case 21:
 this.$ = new Declaracion($$[$0-4], $$[$0-3], $$[$0-1], this._$.first_line, this._$.first_column);
break;
case 22: case 43: case 45:
this.$ = $$[$0-2]; this.$.push($$[$0]);
break;
case 23: case 44: case 46:
this.$ = [$$[$0]];
break;
case 24:
 this.$ = new Declaracion(null, $$[$0], null, this._$.first_line, this._$.first_column);
break;
case 25:
this.$ = new Asignacion($$[$0-3], $$[$0-1], this._$.first_line, this._$.first_column);
break;
case 26:
this.$ = $$[$0-2] + 1;
break;
case 27:
this.$ = 1;
break;
case 28:
this.$ = new Arreglo($$[$0-1], $$[$0], this._$.first_line, this._$.first_column);
break;
case 29:
this.$ = $$[$0-3]; this.$.push($$[$0-1]);
break;
case 30:
this.$ = [$$[$0-1]];
break;
case 31:
this.$ = new Si($$[$0-2], $$[$0], []); 
break;
case 32:
this.$ = new Si($$[$0-4], $$[$0-2], [$$[$0]]);
break;
case 33:
this.$ = new Si($$[$0-4], $$[$0-2], $$[$0], this._$.first_line, this._$.first_column);
break;
case 34:
this.$ = new Mientras($$[$0-2], $$[$0], this._$.first_line, this._$.first_column);
break;
case 35:
 this.$ = new HacerMientras($$[$0-1], $$[$0-4], this._$.first_line, this._$.first_column); 
break;
case 36:
this.$ = new Imprimir($$[$0-1]);
break;
case 37:
this.$ = new Llamada($$[$0-3], $$[$0-1], this._$.first_line, this._$.first_column);
break;
case 38:
this.$ = new Llamada($$[$0-2], [], this._$.first_line, this._$.first_column);
break;
case 39:
this.$ = new Funcion($$[$0-5], $$[$0-4], $$[$0-2], $$[$0], this._$.first_line, this._$.first_column);
break;
case 40:
this.$ = new Funcion(new Tipo('void'), $$[$0-4], $$[$0-2], $$[$0], this._$.first_line, this._$.first_column);
break;
case 41:
this.$ = new Funcion($$[$0-4], $$[$0-3], [], $$[$0], this._$.first_line, this._$.first_column);
break;
case 42:
this.$ = new Funcion(new Tipo('void'), $$[$0-3], [], $$[$0], this._$.first_line, this._$.first_column);
break;
case 47:
this.$ = new Declaracion($$[$0-1], $$[$0], null, this._$.first_line, this._$.first_column)
break;
case 49:
this.$ = [];
break;
case 50:
 this.$ = new OperacionAritmetica($$[$0], undefined, '-', this._$.first_line, this._$.first_column); 
break;
case 51:
 this.$ = new OperacionAritmetica($$[$0-2], $$[$0], '+', this._$.first_line, this._$.first_column); 
break;
case 52:
 this.$ = new OperacionAritmetica($$[$0-2], $$[$0], '-', this._$.first_line, this._$.first_column); 
break;
case 53:
 this.$ = new OperacionAritmetica($$[$0-2], $$[$0], '*', this._$.first_line, this._$.first_column); 
break;
case 54:
 this.$ = new OperacionAritmetica($$[$0-2], $$[$0], '/', this._$.first_line, this._$.first_column); 
break;
case 55:
 this.$ = new OperacionRelacional($$[$0-2], $$[$0], '<', this._$.first_line, this._$.first_column); 
break;
case 56:
 this.$ = new OperacionRelacional($$[$0-2], $$[$0], '>', this._$.first_line, this._$.first_column); 
break;
case 57:
 this.$ = new OperacionRelacional($$[$0-2], $$[$0], '<=', this._$.first_line, this._$.first_column); 
break;
case 58:
 this.$ = new OperacionRelacional($$[$0-2], $$[$0], '>=', this._$.first_line, this._$.first_column); 
break;
case 59:
 this.$ = new OperacionRelacional($$[$0-2], $$[$0], '==', this._$.first_line, this._$.first_column); 
break;
case 60:
 this.$ = new OperacionRelacional($$[$0-2], $$[$0], '!=', this._$.first_line, this._$.first_column); 
break;
case 61:
 this.$ = new Identificador($$[$0], this._$.first_line, this._$.first_column); 
break;
case 62: case 63:
 this.$ = $$[$0]; 
break;
case 64: case 65:
 this.$ = new Primitivo(new Tipo(Types.NUMERIC), $$[$0], this._$.first_line, this._$.first_column); 
break;
case 66:
 this.$ = new Primitivo(new Tipo(Types.BOOLEAN), 1, this._$.first_line, this._$.first_column); 
break;
case 67:
 this.$ = new Primitivo(new Tipo(Types.BOOLEAN), 0, this._$.first_line, this._$.first_column); 
break;
case 68: case 69:
 $$[$0] = $$[$0].slice(1, $$[$0].length-1); this.$ = new Cadena($$[$0], new Arreglo(new Tipo(Types.STRING), [new Primitivo(new Tipo(Types.NUMERIC), $$[$0].length, this._$.first_line, this._$.first_column)], this._$.first_line, this._$.first_column), this._$.first_line, this._$.first_column); 
break;
case 70:
 this.$ = $$[$0-1]; 
break;
}
},
table: [{3:1,4:2,6:3,7:4,8:5,9:6,10:7,12:8,13:9,14:10,15:11,16:$V0,18:13,19:20,21:$V1,22:$V2,23:$V3,24:$V4,25:$V5,26:$V6,36:$V7,41:$V8,42:$V9,43:$Va,46:$Vb},{1:[3]},{5:[1,26],6:27,7:4,8:5,9:6,10:7,12:8,13:9,14:10,15:11,16:$V0,18:13,19:20,21:$V1,22:$V2,23:$V3,24:$V4,25:$V5,26:$V6,36:$V7,41:$V8,42:$V9,43:$Va,46:$Vb},o($Vc,[2,3]),o($Vc,[2,4]),o($Vc,[2,5]),o($Vc,[2,6]),{11:[1,28]},{11:[1,29]},o($Vc,[2,9]),o($Vc,[2,10]),{11:[1,30]},{15:35,17:31,26:$Vd,33:34,34:$Ve,37:$Vf,50:$Vg,60:$Vh,61:$Vi,62:$Vj,63:$Vk,64:$Vl,65:$Vm},{26:[1,44],27:45,30:46},{28:[1,47],37:$Vn},{37:[1,49]},{37:[1,50]},{39:51,48:$Vo},{37:[1,53]},{26:[1,54]},{20:55,26:[2,14],31:[1,56]},o($Vp,[2,15]),o($Vp,[2,16]),o($Vp,[2,17]),o($Vp,[2,18]),o($Vp,[2,19]),{1:[2,1]},o($Vc,[2,2]),o($Vc,[2,7]),o($Vc,[2,8]),o($Vc,[2,11]),{11:[1,57],50:$Vq,51:$Vr,52:$Vs,53:$Vt,54:$Vu,55:$Vv,56:$Vw,57:$Vx,58:$Vy,59:$Vz},{15:35,17:68,26:$Vd,33:34,34:$Ve,37:$Vf,50:$Vg,60:$Vh,61:$Vi,62:$Vj,63:$Vk,64:$Vl,65:$Vm},o($VA,[2,61],{37:$Vn}),o($VA,[2,62]),o($VA,[2,63]),o($VA,[2,64]),o($VA,[2,65]),o($VA,[2,66]),o($VA,[2,67]),o($VA,[2,68]),o($VA,[2,69]),{15:35,17:69,26:$Vd,33:34,34:$Ve,37:$Vf,50:$Vg,60:$Vh,61:$Vi,62:$Vj,63:$Vk,64:$Vl,65:$Vm},{19:70,21:$V1,22:$V2,23:$V3,24:$V4,25:$V5},o($VB,$VC,{11:[1,71],37:[1,72]}),{28:[1,73],29:[1,74]},o($VB,[2,23]),{15:35,17:75,26:$Vd,33:34,34:$Ve,37:$Vf,50:$Vg,60:$Vh,61:$Vi,62:$Vj,63:$Vk,64:$Vl,65:$Vm},{15:35,17:78,26:$Vd,33:34,34:$Ve,37:$Vf,38:[1,77],44:76,50:$Vg,60:$Vh,61:$Vi,62:$Vj,63:$Vk,64:$Vl,65:$Vm},{15:35,17:79,26:$Vd,33:34,34:$Ve,37:$Vf,50:$Vg,60:$Vh,61:$Vi,62:$Vj,63:$Vk,64:$Vl,65:$Vm},{15:35,17:80,26:$Vd,33:34,34:$Ve,37:$Vf,50:$Vg,60:$Vh,61:$Vi,62:$Vj,63:$Vk,64:$Vl,65:$Vm},{41:[1,81]},{4:82,6:3,7:4,8:5,9:6,10:7,12:8,13:9,14:10,15:11,16:$V0,18:13,19:20,21:$V1,22:$V2,23:$V3,24:$V4,25:$V5,26:$V6,36:$V7,41:$V8,42:$V9,43:$Va,46:$Vb,49:[1,83]},{15:35,17:84,26:$Vd,33:34,34:$Ve,37:$Vf,50:$Vg,60:$Vh,61:$Vi,62:$Vj,63:$Vk,64:$Vl,65:$Vm},{37:[1,85]},{26:[2,13],31:[1,86]},{32:[1,87]},o($Vc,[2,12]),{15:35,17:88,26:$Vd,33:34,34:$Ve,37:$Vf,50:$Vg,60:$Vh,61:$Vi,62:$Vj,63:$Vk,64:$Vl,65:$Vm},{15:35,17:89,26:$Vd,33:34,34:$Ve,37:$Vf,50:$Vg,60:$Vh,61:$Vi,62:$Vj,63:$Vk,64:$Vl,65:$Vm},{15:35,17:90,26:$Vd,33:34,34:$Ve,37:$Vf,50:$Vg,60:$Vh,61:$Vi,62:$Vj,63:$Vk,64:$Vl,65:$Vm},{15:35,17:91,26:$Vd,33:34,34:$Ve,37:$Vf,50:$Vg,60:$Vh,61:$Vi,62:$Vj,63:$Vk,64:$Vl,65:$Vm},{15:35,17:92,26:$Vd,33:34,34:$Ve,37:$Vf,50:$Vg,60:$Vh,61:$Vi,62:$Vj,63:$Vk,64:$Vl,65:$Vm},{15:35,17:93,26:$Vd,33:34,34:$Ve,37:$Vf,50:$Vg,60:$Vh,61:$Vi,62:$Vj,63:$Vk,64:$Vl,65:$Vm},{15:35,17:94,26:$Vd,33:34,34:$Ve,37:$Vf,50:$Vg,60:$Vh,61:$Vi,62:$Vj,63:$Vk,64:$Vl,65:$Vm},{15:35,17:95,26:$Vd,33:34,34:$Ve,37:$Vf,50:$Vg,60:$Vh,61:$Vi,62:$Vj,63:$Vk,64:$Vl,65:$Vm},{15:35,17:96,26:$Vd,33:34,34:$Ve,37:$Vf,50:$Vg,60:$Vh,61:$Vi,62:$Vj,63:$Vk,64:$Vl,65:$Vm},{15:35,17:97,26:$Vd,33:34,34:$Ve,37:$Vf,50:$Vg,60:$Vh,61:$Vi,62:$Vj,63:$Vk,64:$Vl,65:$Vm},o($VA,[2,50]),{38:[1,98],50:$Vq,51:$Vr,52:$Vs,53:$Vt,54:$Vu,55:$Vv,56:$Vw,57:$Vx,58:$Vy,59:$Vz},{31:[1,100],35:99},o($Vc,[2,20]),{18:104,19:20,21:$V1,22:$V2,23:$V3,24:$V4,25:$V5,38:[1,102],45:101,47:103},{15:35,17:105,26:$Vd,33:34,34:$Ve,37:$Vf,50:$Vg,60:$Vh,61:$Vi,62:$Vj,63:$Vk,64:$Vl,65:$Vm},{26:[1,107],30:106},{11:[1,108],50:$Vq,51:$Vr,52:$Vs,53:$Vt,54:$Vu,55:$Vv,56:$Vw,57:$Vx,58:$Vy,59:$Vz},{29:[1,110],38:[1,109]},o($VA,[2,38]),o($VD,[2,46],{50:$Vq,51:$Vr,52:$Vs,53:$Vt,54:$Vu,55:$Vv,56:$Vw,57:$Vx,58:$Vy,59:$Vz}),{38:[1,111],50:$Vq,51:$Vr,52:$Vs,53:$Vt,54:$Vu,55:$Vv,56:$Vw,57:$Vx,58:$Vy,59:$Vz},{38:[1,112],50:$Vq,51:$Vr,52:$Vs,53:$Vt,54:$Vu,55:$Vv,56:$Vw,57:$Vx,58:$Vy,59:$Vz},{37:[1,113]},{6:27,7:4,8:5,9:6,10:7,12:8,13:9,14:10,15:11,16:$V0,18:13,19:20,21:$V1,22:$V2,23:$V3,24:$V4,25:$V5,26:$V6,36:$V7,41:$V8,42:$V9,43:$Va,46:$Vb,49:[1,114]},o($VE,[2,49]),{38:[1,115],50:$Vq,51:$Vr,52:$Vs,53:$Vt,54:$Vu,55:$Vv,56:$Vw,57:$Vx,58:$Vy,59:$Vz},{18:104,19:20,21:$V1,22:$V2,23:$V3,24:$V4,25:$V5,38:[1,117],45:116,47:103},{32:[1,118]},o($Vp,[2,27]),o($VF,[2,51],{52:$Vs,53:$Vt}),o($VF,[2,52],{52:$Vs,53:$Vt}),o($VA,[2,53]),o($VA,[2,54]),o($VG,[2,55],{50:$Vq,51:$Vr,52:$Vs,53:$Vt}),o($VG,[2,56],{50:$Vq,51:$Vr,52:$Vs,53:$Vt}),o($VG,[2,57],{50:$Vq,51:$Vr,52:$Vs,53:$Vt}),o($VG,[2,58],{50:$Vq,51:$Vr,52:$Vs,53:$Vt}),o($VH,[2,59],{50:$Vq,51:$Vr,52:$Vs,53:$Vt,54:$Vu,55:$Vv,56:$Vw,57:$Vx}),o($VH,[2,60],{50:$Vq,51:$Vr,52:$Vs,53:$Vt,54:$Vu,55:$Vv,56:$Vw,57:$Vx}),o($VA,[2,70]),o($VA,[2,28],{31:[1,119]}),{15:35,17:120,26:$Vd,33:34,34:$Ve,37:$Vf,50:$Vg,60:$Vh,61:$Vi,62:$Vj,63:$Vk,64:$Vl,65:$Vm},{29:$VI,38:[1,121]},{39:123,48:$Vo},o($VD,[2,44]),{26:[1,124]},{11:[1,125],50:$Vq,51:$Vr,52:$Vs,53:$Vt,54:$Vu,55:$Vv,56:$Vw,57:$Vx,58:$Vy,59:$Vz},o($VB,[2,22]),o($VB,$VC),o($Vc,[2,25]),o($VA,[2,37]),{15:35,17:126,26:$Vd,33:34,34:$Ve,37:$Vf,50:$Vg,60:$Vh,61:$Vi,62:$Vj,63:$Vk,64:$Vl,65:$Vm},{39:127,48:$Vo},{11:[2,36]},{15:35,17:128,26:$Vd,33:34,34:$Ve,37:$Vf,50:$Vg,60:$Vh,61:$Vi,62:$Vj,63:$Vk,64:$Vl,65:$Vm},o($VE,[2,48]),{39:129,48:$Vo},{29:$VI,38:[1,130]},{39:131,48:$Vo},o($Vp,[2,26]),{15:35,17:132,26:$Vd,33:34,34:$Ve,37:$Vf,50:$Vg,60:$Vh,61:$Vi,62:$Vj,63:$Vk,64:$Vl,65:$Vm},{32:[1,133],50:$Vq,51:$Vr,52:$Vs,53:$Vt,54:$Vu,55:$Vv,56:$Vw,57:$Vx,58:$Vy,59:$Vz},{39:134,48:$Vo},{18:104,19:20,21:$V1,22:$V2,23:$V3,24:$V4,25:$V5,47:135},o($Vc,[2,41]),o($VD,[2,47]),o($Vc,[2,21]),o($VD,[2,45],{50:$Vq,51:$Vr,52:$Vs,53:$Vt,54:$Vu,55:$Vv,56:$Vw,57:$Vx,58:$Vy,59:$Vz}),o($Vc,[2,31],{40:[1,136]}),{38:[1,137],50:$Vq,51:$Vr,52:$Vs,53:$Vt,54:$Vu,55:$Vv,56:$Vw,57:$Vx,58:$Vy,59:$Vz},o($Vc,[2,34]),{39:138,48:$Vo},o($Vc,[2,42]),{32:[1,139],50:$Vq,51:$Vr,52:$Vs,53:$Vt,54:$Vu,55:$Vv,56:$Vw,57:$Vx,58:$Vy,59:$Vz},o($VJ,[2,30]),o($Vc,[2,39]),o($VD,[2,43]),{9:140,36:$V7,39:141,48:$Vo},{11:[2,35]},o($Vc,[2,40]),o($VJ,[2,29]),o($Vc,[2,32]),o($Vc,[2,33])],
defaultActions: {26:[2,1],112:[2,36],137:[2,35]},
parseError: function parseError (str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

    const {Primitivo} = require('../Expresiones/Primitivo');
    const {OperacionAritmetica} = require('../Expresiones/OperacionAritmetica');
    const {OperacionRelacional} = require('../Expresiones/OperacionRelacional');
    const {Identificador} = require('../Expresiones/Identificador');
    const {Cadena} = require('../Expresiones/Cadena');
    const {Arreglo} = require('../Expresiones/Arreglo');
    const {Llamada} = require('../Expresiones/Llamada');
    const {Return} = require('../Expresiones/Return');
    const {Imprimir} = require('../Instrucciones/Imprimir');
    const {Si} = require('../Instrucciones/Si');
    const {Funcion} = require('../Instrucciones/Funcion');
    const {Mientras} = require('../Instrucciones/Mientras');
    const {HacerMientras} = require('../Instrucciones/HacerMientras');
    const {Declaracion} = require('../Instrucciones/Declaracion');
    const {Asignacion} = require('../Instrucciones/Asignacion');
    const {Excepcion} = require('../Excepcion/Excepcion');
    const {Tipo, Types} = require('../utils/Tipo');
    const {Arbol} = require('../TablaSimbolos/Arbol');
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function(match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex () {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin (condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState () {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules () {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState (n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState (condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {"case-insensitive":true},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:// comentario simple línea
break;
case 2:// comentario multiple líneas
break;
case 3:return 61
break;
case 4:return 60
break;
case 5:return 64
break;
case 6:return 65
break;
case 7:return 52
break;
case 8:return 53
break;
case 9:return 11
break;
case 10:return 50
break;
case 11:return 51
break;
case 12:return '||'
break;
case 13:return '&&'
break;
case 14:return 54
break;
case 15:return 55
break;
case 16:return 56
break;
case 17:return 57
break;
case 18:return 58
break;
case 19:return 59
break;
case 20:return 28
break;
case 21:return 37
break;
case 22:return 38
break;
case 23:return 31
break;
case 24:return 32
break;
case 25:return 49
break;
case 26:return 48
break;
case 27:return 29
break;
case 28:return 'numeric'
break;
case 29:return 21
break;
case 30:return 22
break;
case 31:return 23
break;
case 32:return 24
break;
case 33:return 25
break;
case 34:return 62
break;
case 35:return 63
break;
case 36:return 34
break;
case 37:return 36
break;
case 38:return 40
break;
case 39:return 46
break;
case 40:return 41
break;
case 41:return 42
break;
case 42:return 43
break;
case 43:return 16
break;
case 44:return 'import'
break;
case 45:return 26
break;
case 46:return 5
break;
}
},
rules: [/^(?:\s+)/i,/^(?:\/\/.*)/i,/^(?:[\/][*][^*]*[*]+([^\/*][^*]*[*]+)*[\/])/i,/^(?:(([0-9]+)\.([0-9]+)))/i,/^(?:([0-9]+))/i,/^(?:(("((\\([\'\"\\bfnrtv]))|([^\"\\]+))*")))/i,/^(?:(('([a-zA-Z0-9])')))/i,/^(?:\*)/i,/^(?:\/)/i,/^(?:;)/i,/^(?:-)/i,/^(?:\+)/i,/^(?:\|\|)/i,/^(?:&&)/i,/^(?:<)/i,/^(?:>)/i,/^(?:<=)/i,/^(?:>=)/i,/^(?:==)/i,/^(?:!=)/i,/^(?:=)/i,/^(?:\()/i,/^(?:\))/i,/^(?:\[)/i,/^(?:\])/i,/^(?:\})/i,/^(?:\{)/i,/^(?:,)/i,/^(?:numeric\b)/i,/^(?:integer\b)/i,/^(?:double\b)/i,/^(?:string\b)/i,/^(?:char\b)/i,/^(?:boolean\b)/i,/^(?:true\b)/i,/^(?:false\b)/i,/^(?:new\b)/i,/^(?:if\b)/i,/^(?:else\b)/i,/^(?:void\b)/i,/^(?:while\b)/i,/^(?:do\b)/i,/^(?:print\b)/i,/^(?:return\b)/i,/^(?:import\b)/i,/^(?:(([a-zA-Z])[a-zA-Z0-9_]*))/i,/^(?:$)/i],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = gramatica;
exports.Parser = gramatica.Parser;
exports.parse = function () { return gramatica.parse.apply(gramatica, arguments); };
exports.main = function commonjsMain (args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}